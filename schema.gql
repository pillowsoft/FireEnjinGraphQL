# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# The id of the job and user being tied together.
input AddUserToJobInput {
  user: String!
  job: String!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

# The information for a job ticket
type Job {
  id: ID!
  customer: String

  # The address of the job
  address: String!

  # The primary phone number to contact for the job
  phone: String
  user: User!
}

# Editable job data
input JobInput {
  customer: String
}

# The information for a migration
type Migration {
  id: ID!
  createdAt: DateTime
}

type Mutation {
  addJob(
    # Add a new Job document to the Jobs collection.
    data: JobInput!
  ): Job!
  deleteJob(
    # The ID of the Job document being deleted in the Jobs collection
    id: String!
  ): Job!
  editJob(
    # Update a Job document in the Jobs collection.
    data: JobInput!

    # The ID of the Job document in the Jobs collection
    id: String!
  ): Job!
  addUser(
    # Add a new User document to the Users collection.
    data: UserInput!
  ): User!
  deleteUser(
    # The ID of the User document being deleted in the Users collection
    id: String!
  ): User!
  editUser(
    # Update a User document in the Users collection.
    data: UserInput!

    # The ID of the User document in the Users collection
    id: String!
  ): User!
  addUserToJob(data: AddUserToJobInput!): Job!
}

type Query {
  # Get a specific Migration document from the Migrations collection.
  migration(id: String!): Migration

  # Get a list of Migration documents from the Migrations collection.
  migrations: [Migration!]

  # Get a specific Job document from the Jobs collection.
  job(id: String!): Job

  # Get a list of Job documents from the Jobs collection.
  jobs: [Job!]

  # Get a specific User document from the Users collection.
  user(id: String!): User

  # Get a list of User documents from the Users collection.
  users: [User!]
}

# The information for a user
type User {
  id: ID!
  name: String!
  email: String!
  jobs: [Job!]!
}

# Editable user data
input UserInput {
  name: String
}
